syntax = "proto3";

package checkers.checkers;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "checkers/checkers/params.proto";

option go_package = "github.com/olimdzhon/checkers/x/checkers/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateGame   (MsgCreateGame  ) returns (MsgCreateGameResponse  );
  rpc PlayMove     (MsgPlayMove    ) returns (MsgPlayMoveResponse    );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                           "authority";
  option           (amino.name) = "checkers/x/checkers/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateGame {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string black   = 2;
  string red     = 3;
}

message MsgCreateGameResponse {
  string gameIndex = 1;
}

message MsgPlayMove {
  option (cosmos.msg.v1.signer) = "creator";
  string creator   = 1;
  string gameIndex = 2;
  uint64 fromX     = 3;
  uint64 fromY     = 4;
  uint64 toX       = 5;
  uint64 toY       = 6;
}

message MsgPlayMoveResponse {
  int32  capturedX = 1;
  int32  capturedY = 2;
  string winner    = 3;
}

